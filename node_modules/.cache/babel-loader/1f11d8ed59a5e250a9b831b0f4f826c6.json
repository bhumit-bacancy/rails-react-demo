{"ast":null,"code":"var _jsxFileName = \"/home/bhumit/react/demo/src/components/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react'; // let logoutTimer;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  user: {},\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n}); // const calcRemainingTime = (expirationTime) => {\n//   const currentTime = new Date().getTime();\n//   const adjExpirationTime = new Date(expirationTime).getTime();\n//   const remainingDuration = adjExpirationTime - currentTime;\n//   return remainingDuration;\n// }\n// const retriveStoredToken = () => {\n//   const storedToken = localStorage.getItem('token');\n//   const storedExpirationTime = localStorage.getItem('exprTime')\n//   const remainingTime = calcRemainingTime(storedExpirationTime);\n//   if (remainingTime <= 60000 ) {\n//     localStorage.removeItem('token')\n//     localStorage.removeItem('exprTime');\n//     return null\n//   }\n//   return {\n//     token: storedToken,\n//     duration: remainingTime\n//   }\n// }\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  // const tokenData = retriveStoredToken();\n  // let initialToken;\n  // if(tokenData) {\n  //   initialToken = tokenData.token;\n  // }\n  const [userIsLoggedIn, setUserIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(); // const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setUser(null); // localStorage.removeItem('token');\n    // localStorage.removeItem('exprTime')\n\n    setUserIsLoggedIn(false); // if(logoutTimer) {\n    //   clearTimeout(logoutTimer);\n    // }\n  };\n\n  const loginHandler = userData => {\n    setUser(userData);\n    setUserIsLoggedIn(true);\n    console.log(user);\n  }; // useEffect(() => {\n  //   if(tokenData){\n  //     console.log(tokenData.duration)\n  //     logoutTimer = setTimeout(logoutHandler, tokenData.duration)\n  //   }\n  // },[tokenData,logoutHandler])\n\n\n  const contextValue = {\n    user: user,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"lSc7ZYC5UBSiyyA8pHP2jz8Eq7w=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/bhumit/react/demo/src/components/store/auth-context.js"],"names":["React","useState","useEffect","useCallback","AuthContext","createContext","user","isLoggedIn","login","token","logout","AuthContextProvider","props","userIsLoggedIn","setUserIsLoggedIn","setUser","logoutHandler","loginHandler","userData","console","log","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD,C,CAEA;;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,CAAoB;AACtCC,EAAAA,IAAI,EAAE,EADgC;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGC,KAAD,IAAW,CAAE,CAHkB;AAItCC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB,C,CAOA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM,CAACK,IAAD,EAAOS,OAAP,IAAkBd,QAAQ,EAAhC,CAR4C,CAU5C;;AAEA,QAAMe,aAAa,GAAG,MAAM;AAC1BD,IAAAA,OAAO,CAAC,IAAD,CAAP,CAD0B,CAE1B;AACA;;AACAD,IAAAA,iBAAiB,CAAC,KAAD,CAAjB,CAJ0B,CAM1B;AACA;AACA;AACD,GATD;;AAWA,QAAMG,YAAY,GAAIC,QAAD,IAAc;AACjCH,IAAAA,OAAO,CAACG,QAAD,CAAP;AACAJ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACD,GAJD,CAvB4C,CA6B5C;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMe,YAAY,GAAG;AACnBf,IAAAA,IAAI,EAAEA,IADa;AAEnBC,IAAAA,UAAU,EAAEM,cAFO;AAGnBL,IAAAA,KAAK,EAAES,YAHY;AAInBP,IAAAA,MAAM,EAAEM;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,YAA7B;AAAA,cACGT,KAAK,CAACU;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhDM;;GAAMX,mB;;KAAAA,mB;AAkDb,eAAeP,WAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\n// let logoutTimer;\n\nconst AuthContext = React.createContext({\n  user: {},\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\n// const calcRemainingTime = (expirationTime) => {\n//   const currentTime = new Date().getTime();\n//   const adjExpirationTime = new Date(expirationTime).getTime();\n\n//   const remainingDuration = adjExpirationTime - currentTime;\n\n//   return remainingDuration;\n// }\n\n// const retriveStoredToken = () => {\n//   const storedToken = localStorage.getItem('token');\n//   const storedExpirationTime = localStorage.getItem('exprTime')\n\n//   const remainingTime = calcRemainingTime(storedExpirationTime);\n\n//   if (remainingTime <= 60000 ) {\n//     localStorage.removeItem('token')\n//     localStorage.removeItem('exprTime');\n//     return null\n//   }\n\n//   return {\n//     token: storedToken,\n//     duration: remainingTime\n//   }\n// }\n\nexport const AuthContextProvider = (props) => {\n  // const tokenData = retriveStoredToken();\n  // let initialToken;\n  // if(tokenData) {\n  //   initialToken = tokenData.token;\n  // }\n  const [userIsLoggedIn, setUserIsLoggedIn] = useState(false);\n\n  const [user, setUser] = useState();\n\n  // const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setUser(null);\n    // localStorage.removeItem('token');\n    // localStorage.removeItem('exprTime')\n    setUserIsLoggedIn(false)\n\n    // if(logoutTimer) {\n    //   clearTimeout(logoutTimer);\n    // }\n  }\n\n  const loginHandler = (userData) => {\n    setUser(userData);\n    setUserIsLoggedIn(true)\n    console.log(user)\n  };\n\n  // useEffect(() => {\n  //   if(tokenData){\n  //     console.log(tokenData.duration)\n  //     logoutTimer = setTimeout(logoutHandler, tokenData.duration)\n  //   }\n  // },[tokenData,logoutHandler])\n\n  const contextValue = {\n    user: user,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}